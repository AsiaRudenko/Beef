/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Beef.Entities;
using Beef.WebApi;
using Newtonsoft.Json.Linq;
using Beef.Demo.Common.Entities;
using Beef.Demo.Common.Agents.ServiceAgents;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Common.Agents
{
    /// <summary>
    /// Provides the Customer group Web API agent.
    /// </summary>
    public partial class CustomerGroupAgent : ICustomerGroupServiceAgent
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerGroupAgent"/> class.
        /// </summary>
        /// <param name="httpClient">The <see cref="HttpClient"/> (where overridding the default value).</param>
        /// <param name="beforeRequest">The <see cref="Action{HttpRequestMessage}"/> to invoke before the <see cref="HttpRequestMessage">Http Request</see> is made (see <see cref="WebApiServiceAgentBase.BeforeRequest"/>).</param>
        public CustomerGroupAgent(HttpClient httpClient = null, Action<HttpRequestMessage> beforeRequest = null)
        {
            CustomerGroupServiceAgent = Beef.Factory.Create<ICustomerGroupServiceAgent>(httpClient, beforeRequest);
        }
        
        /// <summary>
        /// Gets the underlyng <see cref="ICustomerGroupServiceAgent"/> instance.
        /// </summary>
        public ICustomerGroupServiceAgent CustomerGroupServiceAgent { get; private set; }

        /// <summary>
        /// Gets the <see cref="CustomerGroup"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="CustomerGroup"/> identifier.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<CustomerGroup>> GetAsync(string id, RefDataNamespace.Company company, WebApiRequestOptions requestOptions = null)
        {
            return CustomerGroupServiceAgent.GetAsync(id, company, requestOptions);
        }

        /// <summary>
        /// Gets the <see cref="CustomerGroup"/> collection object that matches the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="CustomerGroupArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<CustomerGroupCollectionResult>> GetByArgsAsync(CustomerGroupArgs args, PagingArgs paging = null, WebApiRequestOptions requestOptions = null)
        {
            return CustomerGroupServiceAgent.GetByArgsAsync(args, paging, requestOptions);
        }

        /// <summary>
        /// Creates the <see cref="CustomerGroup"/> object.
        /// </summary>
        /// <param name="value">The <see cref="CustomerGroup"/> object.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<CustomerGroup>> CreateAsync(CustomerGroup value, RefDataNamespace.Company company, WebApiRequestOptions requestOptions = null)
        {
            if (value == null)
                throw new ArgumentNullException("value");

            return CustomerGroupServiceAgent.CreateAsync(value, company, requestOptions);
        }

        /// <summary>
        /// Updates the <see cref="CustomerGroup"/> object.
        /// </summary>
        /// <param name="value">The <see cref="CustomerGroup"/> object.</param>
        /// <param name="id">The <see cref="CustomerGroup"/> identifier.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<CustomerGroup>> UpdateAsync(CustomerGroup value, string id, RefDataNamespace.Company company, WebApiRequestOptions requestOptions = null)
        {
            if (value == null)
                throw new ArgumentNullException("value");

            return CustomerGroupServiceAgent.UpdateAsync(value, id, company, requestOptions);
        }

        /// <summary>
        /// Upserts a <see cref="CustomerGroupCollection"/> as a batch.
        /// </summary>
        /// <param name="value">The Value (see <see cref="CustomerGroupCollection"/>).</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult> UpdateBatchAsync(CustomerGroupCollection value, RefDataNamespace.Company company, WebApiRequestOptions requestOptions = null)
        {
            return CustomerGroupServiceAgent.UpdateBatchAsync(value, company, requestOptions);
        }

        /// <summary>
        /// Deletes the <see cref="CustomerGroup"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="CustomerGroup"/> identifier.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult> DeleteAsync(string id, RefDataNamespace.Company company, WebApiRequestOptions requestOptions = null)
        {
            return CustomerGroupServiceAgent.DeleteAsync(id, company, requestOptions);
        }
    }
}
