/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
using Beef.RefData;
using Newtonsoft.Json;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Common.Entities
{
    /// <summary>
    /// Represents the Address entity.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class Address : EntityBase
    {
        #region PropertyNames
      
        /// <summary>
        /// Represents the <see cref="Street"/> property name.
        /// </summary>
        public const string Property_Street = nameof(Street);

        /// <summary>
        /// Represents the <see cref="City"/> property name.
        /// </summary>
        public const string Property_City = nameof(City);

        #endregion

        #region Privates

        private string _street;
        private string _city;

        #endregion

        #region Constructor
      
        /// <summary>
        /// Initializes a new instance of the <see cref="Address"/> class.
        /// </summary>
        public Address()
        {
            this.AddressConstructor();
        }
        
        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the Street.
        /// </summary>
        [JsonProperty("street", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Street")]
        public string Street
        {
            get { return this._street; }
            set { SetValue(ref this._street, value, false, StringTrim.End, StringTransform.EmptyToNull, Property_Street); }
        }

        /// <summary>
        /// Gets or sets the City.
        /// </summary>
        [JsonProperty("city", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="City")]
        public string City
        {
            get { return this._city; }
            set { SetValue(ref this._city, value, false, StringTrim.End, StringTransform.EmptyToNull, Property_City); }
        }

        #endregion

        #region ICopyFrom
    
        /// <summary>
        /// Performs a copy from another <see cref="Address"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="Address"/> to copy from.</param>
        public override void CopyFrom(object from)
        {
            var fval = ValidateCopyFromType<Address>(from);
            CopyFrom((Address)fval);
        }
        
        /// <summary>
        /// Performs a copy from another <see cref="Address"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="Address"/> to copy from.</param>
        public void CopyFrom(Address from)
        {
            CopyFrom((EntityBase)from);
            this.Street = from.Street;
            this.City = from.City;

            this.OnAfterCopyFrom(from);
        }
    
        #endregion
        
        #region ICloneable
        
        /// <summary>
        /// Creates a deep copy of the <see cref="Address"/>.
        /// </summary>
        /// <returns>A deep copy of the <see cref="Address"/>.</returns>
        public override object Clone()
        {
            var clone = new Address();
            clone.CopyFrom(this);
            return clone;
        }
        
        #endregion
        
        #region ICleanUp

        /// <summary>
        /// Performs a clean-up of the <see cref="Address"/> resetting property values as appropriate to ensure a basic level of data consistency.
        /// </summary>
        public override void CleanUp()
        {
            base.CleanUp();
            this.Street = Cleaner.Clean(this.Street, StringTrim.End, StringTransform.EmptyToNull);
            this.City = Cleaner.Clean(this.City, StringTrim.End, StringTransform.EmptyToNull);

            this.OnAfterCleanUp();
        }
    
        /// <summary>
        /// Indicates whether considered initial; i.e. all properties have their initial value.
        /// </summary>
        /// <returns><c>true</c> indicates is initial; otherwise, <c>false</c>.</returns>
        public override bool IsInitial
        {
            get
            {
                return Cleaner.IsInitial(this.Street)
                    && Cleaner.IsInitial(this.City);
            }
        }

        #endregion

        #region PartialMethods
      
        partial void AddressConstructor();

        partial void OnAfterCleanUp();

        partial void OnAfterCopyFrom(Address from);

        #endregion
    } 
}
