/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Linq;
using Beef;
using Beef.AspNetCore.WebApi;
using Beef.Entities;
using Beef.Demo.Business;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Api.Controllers
{
    /// <summary>
    /// Provides the <b>CustomerGroup</b> API functionality.
    /// </summary>
    [Route("api/v1/customergroups")]
    public partial class CustomerGroupController : ControllerBase
    {
        /// <summary>
        /// Gets the <see cref="CustomerGroup"/> entity that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="CustomerGroup"/> identifier.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <returns>The selected <see cref="CustomerGroup"/> entity where found.</returns>
        [HttpGet()]
        [Route("{company}/{id}")]
        [ProducesResponseType(typeof(CustomerGroup), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        public IActionResult Get(string? id, string? company)
        {
            return new WebApiGet<CustomerGroup?>(this, () => Factory.Create<ICustomerGroupManager>().GetAsync(id, company),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NotFound);
        }

        /// <summary>
        /// Gets the <see cref="CustomerGroup"/> collection entity that matches the selection criteria.
        /// </summary>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <param name="description">The Description.</param>
        /// <returns>A <see cref="CustomerGroupCollection"/>.</returns>
        [HttpGet()]
        [Route("")]
        [ProducesResponseType(typeof(CustomerGroupCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult GetByArgs(string? company = default, string? description = default)
        {
            var args = new CustomerGroupArgs { CompanySid = company, Description = description };
            return new WebApiGet<CustomerGroupCollectionResult, CustomerGroupCollection, CustomerGroup>(this, () => Factory.Create<ICustomerGroupManager>().GetByArgsAsync(args, WebApiQueryString.CreatePagingArgs(this)),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);
        }

        /// <summary>
        /// Creates the <see cref="CustomerGroup"/> entity.
        /// </summary>
        /// <param name="value">The <see cref="CustomerGroup"/> entity.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <returns>The created <see cref="CustomerGroup"/> entity.</returns>
        [HttpPost()]
        [Route("{company}")]
        [ProducesResponseType(typeof(CustomerGroup), (int)HttpStatusCode.Created)]
        public IActionResult Create([FromBody] CustomerGroup value, string? company)
        {
            return new WebApiPost<CustomerGroup>(this, () => Factory.Create<ICustomerGroupManager>().CreateAsync(WebApiActionBase.Value(value), company),
                operationType: OperationType.Create, statusCode: HttpStatusCode.Created, alternateStatusCode: null);
        }

        /// <summary>
        /// Updates the <see cref="CustomerGroup"/> entity.
        /// </summary>
        /// <param name="value">The <see cref="CustomerGroup"/> entity.</param>
        /// <param name="id">The <see cref="CustomerGroup"/> identifier.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <returns>The updated <see cref="CustomerGroup"/> entity.</returns>
        [HttpPut()]
        [Route("{company}/{id}")]
        [ProducesResponseType(typeof(CustomerGroup), (int)HttpStatusCode.OK)]
        public IActionResult Update([FromBody] CustomerGroup value, string? id, string? company)
        {
            return new WebApiPut<CustomerGroup>(this, () => Factory.Create<ICustomerGroupManager>().UpdateAsync(WebApiActionBase.Value(value), id, company),
                operationType: OperationType.Update, statusCode: HttpStatusCode.OK, alternateStatusCode: null);
        }

        /// <summary>
        /// Upserts a <see cref="CustomerGroupCollection"/> as a batch.
        /// </summary>
        /// <param name="value">The Value (see <see cref="CustomerGroupCollection"/>).</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        [HttpPut]
        [Route("{company}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult UpdateBatch([FromBody] CustomerGroupCollection? value, string? company)
        {
            return new WebApiPut(this, () => Factory.Create<ICustomerGroupManager>().UpdateBatchAsync(value, company),
                operationType: OperationType.Unspecified, statusCode: HttpStatusCode.NoContent);
        }

        /// <summary>
        /// Deletes the <see cref="CustomerGroup"/> entity that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="CustomerGroup"/> identifier.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        [HttpDelete()]
        [Route("{company}/{id}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult Delete(string? id, string? company)
        {
            return new WebApiDelete(this, () => Factory.Create<ICustomerGroupManager>().DeleteAsync(id, company),
                operationType: OperationType.Delete, statusCode: HttpStatusCode.NoContent);
        }
    }
}

#nullable restore