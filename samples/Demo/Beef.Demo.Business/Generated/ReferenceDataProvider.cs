/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using System.Threading.Tasks;
using Beef.RefData;
using Beef.Demo.Business.DataSvc;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business
{
    /// <summary>
    /// Provides the <see cref="ReferenceData"/> implementation using the corresponding data services.
    /// </summary>
    public class ReferenceDataProvider : ReferenceData
    {
        #region Collections

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.GenderCollection"/>.
        /// </summary>
        public override RefDataNamespace.GenderCollection Gender
        {
            get { return (RefDataNamespace.GenderCollection)this[typeof(RefDataNamespace.Gender)]; }
        }

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.EyeColorCollection"/>.
        /// </summary>
        public override RefDataNamespace.EyeColorCollection EyeColor
        {
            get { return (RefDataNamespace.EyeColorCollection)this[typeof(RefDataNamespace.EyeColor)]; }
        }

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.CompanyCollection"/>.
        /// </summary>
        public override RefDataNamespace.CompanyCollection Company
        {
            get { return (RefDataNamespace.CompanyCollection)this[typeof(RefDataNamespace.Company)]; }
        }

        #endregion
  
        /// <summary>
        /// Gets the <see cref="IReferenceDataCollection"/> for the associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The <see cref="ReferenceDataBase"/> <see cref="Type"/>.</param>
        /// <returns>A <see cref="IReferenceDataCollection"/>.</returns>
        public override IReferenceDataCollection this[Type type]
        {
            get
            {
                return ReferenceDataDataSvc.GetCollection(type);
            }
        }
        
        /// <summary>
        /// Prefetches all, or the list of <see cref="ReferenceDataBase"/> objects, where not already cached or expired.
        /// </summary>
        /// <param name="names">The list of <see cref="ReferenceDataBase"/> names; otherwise, <c>null</c> for all.</param>
        public override Task PrefetchAsync(params string[] names)
        {
            return Task.Run(() =>
            {
                IReferenceDataCollection temp;
            
                if (names == null)
                {
                    temp = this[typeof(RefDataNamespace.Gender)];
                    temp = this[typeof(RefDataNamespace.EyeColor)];
                    temp = this[typeof(RefDataNamespace.Company)];
            
                    return;
                }

                foreach (string name in names)
                {
                    switch (name)
                    {
                        case ReferenceData.Property_Gender: temp = this[typeof(RefDataNamespace.Gender)]; break;
                        case ReferenceData.Property_EyeColor: temp = this[typeof(RefDataNamespace.EyeColor)]; break;
                        case ReferenceData.Property_Company: temp = this[typeof(RefDataNamespace.Company)]; break;
                    }
                }
            });
        }
    }
}
