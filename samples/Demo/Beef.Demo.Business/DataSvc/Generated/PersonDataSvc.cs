/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Demo.Business.Data;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business.DataSvc
{
    /// <summary>
    /// Provides the Person data repository services.
    /// </summary>
    public static partial class PersonDataSvc
    {
        /// <summary>
        /// Creates the <see cref="Person"/> object.
        /// </summary>
        /// <param name="value">The <see cref="Person"/> object.</param>
        /// <returns>A refreshed <see cref="Person"/> object.</returns>
        public static Task<Person> CreateAsync(Person value)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __result = await Factory.Create<IPersonData>().CreateAsync(value);
                await Beef.Events.Event.PublishAsync(__result, "Demo.Person.{id}", "Create", new KeyValuePair<string, object>("id", __result.Id));
                ExecutionContext.Current.CacheSet<Person>(__result?.UniqueKey ?? UniqueKey.Empty, __result);
                return __result;
            });
        }      

        /// <summary>
        /// Deletes the <see cref="Person"/> object.
        /// </summary>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        public static Task DeleteAsync(Guid id)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                await Factory.Create<IPersonData>().DeleteAsync(id);
                await Beef.Events.Event.PublishAsync("Demo.Person.{id}", "Delete", new KeyValuePair<string, object>("id", id));
                ExecutionContext.Current.CacheRemove<Person>(new UniqueKey(id));
            });
        }      

        /// <summary>
        /// Gets the <see cref="Person"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        /// <returns>The selected <see cref="Person"/> object where found; otherwise, <c>null</c>.</returns>
        public static Task<Person> GetAsync(Guid id)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __key = new UniqueKey(id);
                if (ExecutionContext.Current.TryGetCacheValue<Person>(__key, out Person __val))
                    return __val;

                var __result = await Factory.Create<IPersonData>().GetAsync(id);
                ExecutionContext.Current.CacheSet<Person>(__key, __result);
                return __result;
            });
        }      

        /// <summary>
        /// Updates the <see cref="Person"/> object.
        /// </summary>
        /// <param name="value">The <see cref="Person"/> object.</param>
        /// <returns>A refreshed <see cref="Person"/> object.</returns>
        public static Task<Person> UpdateAsync(Person value)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __result = await Factory.Create<IPersonData>().UpdateAsync(value);
                await Beef.Events.Event.PublishAsync(__result, "Demo.Person.{id}", "Update", new KeyValuePair<string, object>("id", __result.Id));
                ExecutionContext.Current.CacheSet<Person>(__result?.UniqueKey ?? UniqueKey.Empty, __result);
                return __result;
            }, new BusinessInvokerArgs { IncludeTransactionScope = true });
        }      

        /// <summary>
        /// Gets the <see cref="Person"/> collection object that matches the selection criteria.
        /// </summary>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>A <see cref="PersonCollectionResult"/>.</returns>
        public static Task<PersonCollectionResult> GetAllAsync(PagingArgs paging)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __result = await Factory.Create<IPersonData>().GetAllAsync(paging);
                return __result;
            });
        }      

        /// <summary>
        /// Gets the <see cref="Person"/> collection object that matches the selection criteria.
        /// </summary>
        /// <returns>A <see cref="PersonCollectionResult"/>.</returns>
        public static Task<PersonCollectionResult> GetAll2Async()
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __result = await Factory.Create<IPersonData>().GetAll2Async();
                return __result;
            });
        }      

        /// <summary>
        /// Gets the <see cref="Person"/> collection object that matches the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="PersonArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>A <see cref="PersonCollectionResult"/>.</returns>
        public static Task<PersonCollectionResult> GetByArgsAsync(PersonArgs args, PagingArgs paging)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __result = await Factory.Create<IPersonData>().GetByArgsAsync(args, paging);
                return __result;
            });
        }      

        /// <summary>
        /// Gets the <see cref="PersonDetail"/> collection object that matches the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="PersonArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>A <see cref="PersonDetailCollectionResult"/>.</returns>
        public static Task<PersonDetailCollectionResult> GetDetailByArgsAsync(PersonArgs args, PagingArgs paging)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __result = await Factory.Create<IPersonData>().GetDetailByArgsAsync(args, paging);
                return __result;
            });
        }      

        /// <summary>
        /// Merge first <see cref="Person"/> into second.
        /// </summary>
        /// <param name="fromId">The from <see cref="Person"/> identifier.</param>
        /// <param name="toId">The to <see cref="Person"/> identifier.</param>
        /// <returns>A resultant <see cref="Person"/>.</returns>
        public static Task<Person> MergeAsync(Guid fromId, Guid toId)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __result = await Factory.Create<IPersonData>().MergeAsync(fromId, toId);
                await Beef.Events.Event.PublishAsync(
                    Beef.Events.EventData.Create(__result, "Demo.Person.{fromId}", "Merge", new KeyValuePair<string, object>("fromId", fromId), new KeyValuePair<string, object>("toId", toId)));
                ExecutionContext.Current.CacheSet<Person>(__result?.UniqueKey ?? UniqueKey.Empty, __result);
                return __result;
            });
        }      

        /// <summary>
        /// Mark <see cref="Person"/>.
        /// </summary>
        public static Task MarkAsync()
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                await Factory.Create<IPersonData>().MarkAsync();
            });
        }      

        /// <summary>
        /// Gets the <see cref="PersonDetail"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        /// <returns>The selected <see cref="PersonDetail"/> object where found; otherwise, <c>null</c>.</returns>
        public static Task<PersonDetail> GetDetailAsync(Guid id)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __key = new UniqueKey(id);
                if (ExecutionContext.Current.TryGetCacheValue<PersonDetail>(__key, out PersonDetail __val))
                    return __val;

                var __result = await Factory.Create<IPersonData>().GetDetailAsync(id);
                ExecutionContext.Current.CacheSet<PersonDetail>(__key, __result);
                return __result;
            });
        }      

        /// <summary>
        /// Updates the <see cref="PersonDetail"/> object.
        /// </summary>
        /// <param name="value">The <see cref="PersonDetail"/> object.</param>
        /// <returns>A refreshed <see cref="PersonDetail"/> object.</returns>
        public static Task<PersonDetail> UpdateDetailAsync(PersonDetail value)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __result = await Factory.Create<IPersonData>().UpdateDetailAsync(value);
                await Beef.Events.Event.PublishAsync(__result, "Demo.Person.{id}", "Update", new KeyValuePair<string, object>("id", __result.Id));
                ExecutionContext.Current.CacheSet<PersonDetail>(__result?.UniqueKey ?? UniqueKey.Empty, __result);
                return __result;
            });
        }      

        /// <summary>
        /// Gets the <see cref="Person"/> collection object that matches the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="PersonArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>A <see cref="PersonCollectionResult"/>.</returns>
        public static Task<PersonCollectionResult> GetByArgsWithEfAsync(PersonArgs args, PagingArgs paging)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __result = await Factory.Create<IPersonData>().GetByArgsWithEfAsync(args, paging);
                return __result;
            });
        }      

        /// <summary>
        /// Gets the <see cref="Person"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        /// <returns>The selected <see cref="Person"/> object where found; otherwise, <c>null</c>.</returns>
        public static Task<Person> GetWithEfAsync(Guid id)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __key = new UniqueKey(id);
                if (ExecutionContext.Current.TryGetCacheValue<Person>(__key, out Person __val))
                    return __val;

                var __result = await Factory.Create<IPersonData>().GetWithEfAsync(id);
                ExecutionContext.Current.CacheSet<Person>(__key, __result);
                return __result;
            });
        }      

        /// <summary>
        /// Creates the <see cref="Person"/> object.
        /// </summary>
        /// <param name="value">The <see cref="Person"/> object.</param>
        /// <returns>A refreshed <see cref="Person"/> object.</returns>
        public static Task<Person> CreateWithEfAsync(Person value)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __result = await Factory.Create<IPersonData>().CreateWithEfAsync(value);
                await Beef.Events.Event.PublishAsync(__result, "Demo.Person.{id}", "Create", new KeyValuePair<string, object>("id", __result.Id));
                ExecutionContext.Current.CacheSet<Person>(__result?.UniqueKey ?? UniqueKey.Empty, __result);
                return __result;
            });
        }      

        /// <summary>
        /// Updates the <see cref="Person"/> object.
        /// </summary>
        /// <param name="value">The <see cref="Person"/> object.</param>
        /// <returns>A refreshed <see cref="Person"/> object.</returns>
        public static Task<Person> UpdateWithEfAsync(Person value)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                var __result = await Factory.Create<IPersonData>().UpdateWithEfAsync(value);
                await Beef.Events.Event.PublishAsync(__result, "Demo.Person.{id}", "Update", new KeyValuePair<string, object>("id", __result.Id));
                ExecutionContext.Current.CacheSet<Person>(__result?.UniqueKey ?? UniqueKey.Empty, __result);
                return __result;
            });
        }      

        /// <summary>
        /// Deletes the <see cref="Person"/> object.
        /// </summary>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        public static Task DeleteWithEfAsync(Guid id)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(PersonDataSvc), async () => 
            {
                await Factory.Create<IPersonData>().DeleteWithEfAsync(id);
                await Beef.Events.Event.PublishAsync(
                    Beef.Events.EventData.Create("Demo.Person.{id}", "Delete", new KeyValuePair<string, object>("id", id)));
                ExecutionContext.Current.CacheRemove<Person>(new UniqueKey(id));
            });
        }      
    }
}