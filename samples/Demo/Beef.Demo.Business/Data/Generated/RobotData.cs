/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Microsoft.Azure.Cosmos;
using Beef.Data.Cosmos;
using Beef.Entities;
using Beef.Mapper;
using Beef.Mapper.Converters;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business.Data
{
    /// <summary>
    /// Provides the Robot data access.
    /// </summary>
    public partial class RobotData : IRobotData
    {
        #region Private

        private Func<Guid, ICosmosDbArgs, Task> _getOnBeforeAsync = null;
        private Func<Robot, Guid, Task> _getOnAfterAsync = null;
        private Action<Exception> _getOnException = null;

        private Func<Robot, ICosmosDbArgs, Task> _createOnBeforeAsync = null;
        private Func<Robot, Task> _createOnAfterAsync = null;
        private Action<Exception> _createOnException = null;

        private Func<Robot, ICosmosDbArgs, Task> _updateOnBeforeAsync = null;
        private Func<Robot, Task> _updateOnAfterAsync = null;
        private Action<Exception> _updateOnException = null;

        private Func<Guid, ICosmosDbArgs, Task> _deleteOnBeforeAsync = null;
        private Func<Guid, Task> _deleteOnAfterAsync = null;
        private Action<Exception> _deleteOnException = null;

        private Func<IQueryable<Robot>, RobotArgs, ICosmosDbArgs, IQueryable<Robot>> _getByArgsOnQuery = null;
        private Func<RobotArgs, ICosmosDbArgs, Task> _getByArgsOnBeforeAsync = null;
        private Func<RobotCollectionResult, RobotArgs, Task> _getByArgsOnAfterAsync = null;
        private Action<Exception> _getByArgsOnException = null;

        #endregion

        /// <summary>
        /// Gets the <see cref="Robot"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Robot"/> identifier.</param>
        /// <returns>The selected <see cref="Robot"/> object where found; otherwise, <c>null</c>.</returns>
        public Task<Robot> GetAsync(Guid id)
        {
            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                Robot __result = null;
                var __dataArgs = CosmosDbArgs.Create("Items", PartitionKey.None);
                if (_getOnBeforeAsync != null) await _getOnBeforeAsync(id, __dataArgs);
                __result = await CosmosDb.Default.GetAsync<Robot>(__dataArgs, id);
                if (_getOnAfterAsync != null) await _getOnAfterAsync(__result, id);
                return __result;
            }, new BusinessInvokerArgs { ExceptionHandler = _getOnException });
        }

        /// <summary>
        /// Creates the <see cref="Robot"/> object.
        /// </summary>
        /// <param name="value">The <see cref="Robot"/> object.</param>
        /// <returns>A refreshed <see cref="Robot"/> object.</returns>
        public Task<Robot> CreateAsync(Robot value)
        {
            if (value == null)
                throw new ArgumentNullException(nameof(value));

            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                Robot __result = null;
                var __dataArgs = CosmosDbArgs.Create("Items", PartitionKey.None);
                if (_createOnBeforeAsync != null) await _createOnBeforeAsync(value, __dataArgs);
                __result = await CosmosDb.Default.CreateAsync(__dataArgs, value);
                if (_createOnAfterAsync != null) await _createOnAfterAsync(__result);
                return __result;
            }, new BusinessInvokerArgs { ExceptionHandler = _createOnException });
        }

        /// <summary>
        /// Updates the <see cref="Robot"/> object.
        /// </summary>
        /// <param name="value">The <see cref="Robot"/> object.</param>
        /// <returns>A refreshed <see cref="Robot"/> object.</returns>
        public Task<Robot> UpdateAsync(Robot value)
        {
            if (value == null)
                throw new ArgumentNullException(nameof(value));

            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                Robot __result = null;
                var __dataArgs = CosmosDbArgs.Create("Items", PartitionKey.None);
                if (_updateOnBeforeAsync != null) await _updateOnBeforeAsync(value, __dataArgs);
                __result = await CosmosDb.Default.UpdateAsync(__dataArgs, value);
                if (_updateOnAfterAsync != null) await _updateOnAfterAsync(__result);
                return __result;
            }, new BusinessInvokerArgs { ExceptionHandler = _updateOnException });
        }

        /// <summary>
        /// Deletes the <see cref="Robot"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Robot"/> identifier.</param>
        public Task DeleteAsync(Guid id)
        {
            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                var __dataArgs = CosmosDbArgs.Create("Items", PartitionKey.None);
                if (_deleteOnBeforeAsync != null) await _deleteOnBeforeAsync(id, __dataArgs);
                await CosmosDb.Default.DeleteAsync<Robot>(__dataArgs, id);
                if (_deleteOnAfterAsync != null) await _deleteOnAfterAsync(id);
            }, new BusinessInvokerArgs { ExceptionHandler = _deleteOnException });
        }

        /// <summary>
        /// Gets the <see cref="Robot"/> collection object that matches the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="RobotArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>A <see cref="RobotCollectionResult"/>.</returns>
        public Task<RobotCollectionResult> GetByArgsAsync(RobotArgs args, PagingArgs paging)
        {
            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                RobotCollectionResult __result = new RobotCollectionResult(paging);
                var __dataArgs = CosmosDbArgs.Create("Items", PartitionKey.None, __result.Paging);
                if (_getByArgsOnBeforeAsync != null) await _getByArgsOnBeforeAsync(args, __dataArgs);
                __result.Result = CosmosDb.Default.Query<Robot>(__dataArgs, q => _getByArgsOnQuery == null ? q : _getByArgsOnQuery(q, args, __dataArgs)).SelectQuery<RobotCollection>();
                if (_getByArgsOnAfterAsync != null) await _getByArgsOnAfterAsync(__result, args);
                return __result;
            }, new BusinessInvokerArgs { ExceptionHandler = _getByArgsOnException });
        }
    }
}
