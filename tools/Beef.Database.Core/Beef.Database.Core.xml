<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Beef.Database.Core</name>
    </assembly>
    <members>
        <member name="T:Beef.Database.Core.DatabaseConsole">
            <summary>
            <b>Database Console</b> that facilitates the database tooling by handling the standard console arguments invoking the underlying <see cref="T:Beef.Database.Core.DatabaseExecutor"/>.
            </summary>
            <remarks>Command line parsing: https://natemcmaster.github.io/CommandLineUtils/ </remarks>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsole.Create">
            <summary>
            Creates a new instance of the <see cref="T:Beef.Database.Core.DatabaseConsole"/>.
            </summary>
            <returns>The <see cref="T:Beef.Database.Core.DatabaseConsole"/>.</returns>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsole.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Beef.CodeGen.CodeGenConsole"/> class.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsole.OnValidate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs addition validations.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.DatabaseConsole.App">
            <summary>
            Gets the underlying <see cref="T:McMaster.Extensions.CommandLineUtils.CommandLineApplication"/>.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsole.Run(System.String)">
            <summary>
            Runs the database tooling using the passed <paramref name="args"/> string.
            </summary>
            <param name="args">The database tooling arguments.</param>
            <returns><b>Zero</b> indicates success; otherwise, unsucessful.</returns>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsole.Run(System.String[])">
            <summary>
            Runs the database tooling using the passed array of <paramref name="args"/>.
            </summary>
            <param name="args">The code generation arguments.</param>
            <returns><b>Zero</b> indicates success; otherwise, unsucessful.</returns>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsole.RunRunAwayAsync">
            <summary>
            Creates <see cref="T:Beef.Executors.ExecutionManager"/> and coordinates the run (overall execution).
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsole.SetupExecutionContext">
            <summary>
            Set up the <see cref="T:Beef.ExecutionContext"/> including the log to console binding.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsole.WriteHeader(Beef.CodeGen.CodeGenExecutorArgs)">
            <summary>
            Writes the header information.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsole.WriteFooter(System.Diagnostics.Stopwatch)">
            <summary>
            Write the footer information.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsole.ConsoleWriteLine(System.String,System.Nullable{System.ConsoleColor})">
            <summary>
            Writes the specified text to the console.
            </summary>
            <param name="text">The text.</param>
            <param name="foregroundColor">The foreground <see cref="T:System.ConsoleColor"/>.</param>
        </member>
        <member name="T:Beef.Database.Core.DatabaseConsoleWrapper">
            <summary>
            <b>Database Console</b> wrapper to simplify/standardise execution of the <see cref="T:Beef.Database.Core.DatabaseConsole"/>. 
            </summary>
            <remarks>An environment variable named '<see cref="P:Beef.Database.Core.DatabaseConsoleWrapper.Company"/><see cref="P:Beef.Database.Core.DatabaseConsoleWrapper.AppName"/>ConnectionString' overrides any passed (default) <see cref="P:Beef.Database.Core.DatabaseConsoleWrapper.ConnectionString"/>.</remarks>
        </member>
        <member name="P:Beef.Database.Core.DatabaseConsoleWrapper.CommandLineTemplate">
            <summary>
            Gets the command line template.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.DatabaseConsoleWrapper.CommandLineAssemblyTemplate">
            <summary>
            Gets the command line assembly portion template.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsoleWrapper.Create(System.Reflection.Assembly[],System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Beef.Database.Core.DatabaseConsoleWrapper"/> class.
            </summary>
            <param name="assemblies">The assemblies containing the embedded resources.</param>
            <param name="connectionString">The default connection string.</param>
            <param name="company">The company name.</param>
            <param name="appName">The application/domain name.</param>
            <param name="outDir">The output path/directory.</param>
            <param name="useBeefDbo">Indicates whether to use the standard BEEF <b>dbo</b> schema objects (defaults to <c>true</c>).</param>
            <returns>The <see cref="T:Beef.Database.Core.DatabaseConsoleWrapper"/> instance.</returns>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsoleWrapper.Create(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Beef.Database.Core.DatabaseConsoleWrapper"/> class defaulting to <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/>.
            </summary>
            <param name="connectionString">The default connection string.</param>
            <param name="company">The company name.</param>
            <param name="appName">The application/domain name.</param>
            <param name="outDir">The output path/directory.</param>
            <param name="useBeefDbo">Indicates whether to use the standard BEEF <b>dbo</b> schema objects (defaults to <c>true</c>).</param>
            <returns>The <see cref="T:Beef.Database.Core.DatabaseConsoleWrapper"/> instance.</returns>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsoleWrapper.#ctor(System.Reflection.Assembly[],System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Beef.Database.Core.DatabaseConsoleWrapper"/> class.
            </summary>
            <param name="assemblies">The assemblies containing the embedded resources.</param>
            <param name="connectionString">The default connection string.</param>
            <param name="company">The company name.</param>
            <param name="appName">The application/domain name.</param>
            <param name="outDir">The output path/directory.</param>
            <param name="useBeefDbo">Indicates whether to use the standard BEEF <b>dbo</b> schema objects (defaults to <c>true</c>).</param>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsoleWrapper.OverrideConnectionString">
            <summary>
            Override connection string if specified as an environment variable.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.DatabaseConsoleWrapper.ConnectionString">
            <summary>
            Gets the default connection string.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.DatabaseConsoleWrapper.Assemblies">
            <summary>
            Gets the assemblies containing the embedded resources.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.DatabaseConsoleWrapper.Company">
            <summary>
            Gets the company name.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.DatabaseConsoleWrapper.AppName">
            <summary>
            Gets the application/domain name.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.DatabaseConsoleWrapper.OutDir">
            <summary>
            Gets the output path/directory.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsoleWrapper.Run(System.String[])">
            <summary>
            Executes the underlying <see cref="T:Beef.Database.Core.DatabaseConsole"/> using the database tooling arguments.
            </summary>
            <param name="args">The code generation arguments.</param>
            <returns><b>Zero</b> indicates success; otherwise, unsucessful.</returns>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsoleWrapper.GetTableSchemaParams(System.String,System.String)">
            <summary>
            Get the table and schema paramaters from the argument.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseConsoleWrapper.ReplaceMoustache(System.String,System.String,System.String,System.String)">
            <summary>
            Replace the moustache placeholders.
            </summary>
        </member>
        <member name="T:Beef.Database.Core.DatabaseExecutor">
            <summary>
            Represents the database executor.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.DatabaseExecutor.MigrationsNamespace">
            <summary>
            Gets or sets the <b>Migrations</b> scripts namespace part name.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.DatabaseExecutor.SchemaNamespace">
            <summary>
            Gets or sets the <b>Schema</b> namespace part name.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.DatabaseExecutor.DataNamespace">
            <summary>
            Gets or sets the <b>Data</b> namespace part name.
            </summary>
        </member>
        <member name="T:Beef.Database.Core.DatabaseExecutor.LoggerSink">
            <summary>
            Represents a DbUp to Beef Logger sink.
            </summary>
        </member>
        <member name="T:Beef.Database.Core.DatabaseExecutor.SqlSchemaScript">
            <summary>
            Represents the SQL schema script object.
            </summary>
        </member>
        <member name="T:Beef.Database.Core.DatabaseExecutor.Db">
            <summary>
            Represents the Database being upgraded.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.Run(Beef.Database.Core.DatabaseExecutorCommand,System.String,System.Reflection.Assembly[],Beef.CodeGen.CodeGenExecutorArgs)">
            <summary>
            Runs the <see cref="T:Beef.Database.Core.DatabaseExecutor"/> directly.
            </summary>
            <param name="command">The <see cref="T:Beef.Database.Core.DatabaseExecutorCommand"/>.</param>
            <param name="connectionString">The database connection string.</param>
            <param name="assemblies">The <see cref="T:System.Reflection.Assembly"/> array whose embedded resources will be probed.</param>
            <param name="codeGenArgs">The <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.CodeGen"/> arguments.</param>
            <returns>The return code; zero equals success.</returns>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.Run(Beef.Database.Core.DatabaseExecutorCommand,System.String,System.Reflection.Assembly[])">
            <summary>
            Runs the <see cref="T:Beef.Database.Core.DatabaseExecutor"/> directly.
            </summary>
            <param name="command">The <see cref="T:Beef.Database.Core.DatabaseExecutorCommand"/>.</param>
            <param name="connectionString">The database connection string.</param>
            <param name="assemblies">The <see cref="T:System.Reflection.Assembly"/> array whose embedded resources will be probed.</param>
            <returns>The return code; zero equals success.</returns>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.HandleRunResult(Beef.Executors.ExecutionManager)">
            <summary>
            Handles the execution manager run result.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.#ctor(Beef.Database.Core.DatabaseExecutorCommand,System.String,System.Reflection.Assembly[],Beef.CodeGen.CodeGenExecutorArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Beef.Database.Core.DatabaseExecutor"/> class.
            </summary>
            <param name="command">The <see cref="T:Beef.Database.Core.DatabaseExecutorCommand"/>.</param>
            <param name="connectionString">The database connection string.</param>
            <param name="assemblies">The <see cref="T:System.Reflection.Assembly"/> array whose embedded resources will be probed.</param>
            <param name="codeGenArgs">The <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.CodeGen"/> arguments.</param>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.OnRunAsync(Beef.Executors.ExecutorRunArgs)">
            <summary>
            Execute the database upgrade.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.TimeExecution(System.Func{System.Boolean})">
            <summary>
            Times the execution and reports result.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.ScriptsNamespaceFilter(System.String)">
            <summary>
            Filters by the <see cref="P:Beef.Database.Core.DatabaseExecutor.MigrationsNamespace"/>.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.GetNamespacesWithSuffix(System.String)">
            <summary>
            Gets the namespaces with the namespace suffix applied.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.DropAndCreateAllObjects(System.String[])">
            <summary>
            Drops and/or Alter and/or Create Objects.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.RenameFileToResourceName(System.IO.FileInfo)">
            <summary>
            Rename file to resource name format.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.RenameFileToResourceNameReplace(System.String)">
            <summary>
            Replace the special characters to convert filename to resource name.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.ExecuteSqlStatement(System.Action,System.String)">
            <summary>
            Wraps the SQL statement(s) and reports success or failure.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.DeleteAllAndResetIdent">
            <summary>
            Delete all data from all tables and reset any identity (IDENT) columns to zero.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.InsertOrMergeYamlData">
            <summary>
            Inserts or merges the embedded YAML data.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.DatabaseExecutor.CreateScriptNew">
            <summary>
            Creates the new script from the template.
            </summary>
        </member>
        <member name="T:Beef.Database.Core.DatabaseExecutorCommand">
            <summary>
            Represents the <see cref="T:Beef.Database.Core.DatabaseExecutor"/> commands.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.None">
            <summary>
            Nothing specified.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.Drop">
            <summary>
            Drop the existing database (where it already exists).
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.Create">
            <summary>
            Create the database (where it does not already exist).
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.Migrate">
            <summary>
            Migrate the database using the <b>Migrations</b> scripts (those that have not already been executed).
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.CodeGen">
            <summary>
            Generates database <b>Schema</b> objects via code generation.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.Schema">
            <summary>
            Drops and creates the known database <b>Schema</b> objects.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.Reset">
            <summary>
            Resets the database by deleting all existing data and reseting all identities (IDENT) to 0.  
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.Data">
            <summary>
            Inserts or merges <b>Data</b> from embedded YAML files.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.All">
            <summary>
            Performs <b>all</b> commands as follows; <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Create"/>, <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Migrate"/>, <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.CodeGen"/>, <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Schema"/> and <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Data"/>.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.DropAndAll">
            <summary>
            Performs <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Drop"/> and <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.All"/>.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.ResetAndAll">
            <summary>
            Performs <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Reset"/> and <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.All"/>.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.Database">
            <summary>
            Performs only the <b>database</b> commands as follows: <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Create"/>, <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Migrate"/>, <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Schema"/> and <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Data"/>.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.DropAndDatabase">
            <summary>
            Performs <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Drop"/> and <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Database"/>.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.ResetAndDatabase">
            <summary>
            Performs <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Reset"/> and <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Database"/>.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.ResetAndData">
            <summary>
            Performs <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Reset"/> and <see cref="F:Beef.Database.Core.DatabaseExecutorCommand.Data"/>.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.DatabaseExecutorCommand.ScriptNew">
            <summary>
            Creates a new script file using the defined naming convention.
            </summary>
        </member>
        <member name="T:Beef.Database.Core.Program">
            <summary>
            Provides the console capabilities.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Program.Main(System.String[])">
            <summary>
            The main entry point.
            </summary>
            <param name="args">The console arguments.</param>
            <returns>A statuc code.</returns>
        </member>
        <member name="T:Beef.Database.Core.Sql.SqlDataColumn">
            <summary>
            Represents the SQL data column.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataColumn.Name">
            <summary>
            Gets or sets the column name.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataColumn.Value">
            <summary>
            Gets or sets the column value.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataColumn.UseForeignKeyQueryForId">
            <summary>
            Indicates whether to use a foreign key query for the identifier.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataColumn.ToSqlValue">
            <summary>
            Gets the value formatted for use in a SQL statement.
            </summary>
            <returns>The value formatted for use in a SQL statement.</returns>
        </member>
        <member name="T:Beef.Database.Core.Sql.SqlDataRow">
            <summary>
            Represents the SQL data row.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataRow.#ctor(Beef.Database.Core.Sql.SqlDataTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Beef.Database.Core.Sql.SqlDataRow"/> class.
            </summary>
            <param name="table">The parent <see cref="T:Beef.Database.Core.Sql.SqlDataTable"/>.</param>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataRow.Table">
            <summary>
            Gets the <see cref="T:Beef.Database.Core.Sql.SqlDataTable"/>.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataRow.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataRow.AddColumn(System.String,System.Object)">
            <summary>
            Adds a <see cref="T:Beef.Database.Core.Sql.SqlDataColumn"/> to the row using the specified name and value.
            </summary>
            <param name="name">The column name.</param>
            <param name="value">The column value.</param>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataRow.AddColumn(Beef.Database.Core.Sql.SqlDataColumn)">
            <summary>
            Adds a <see cref="T:Beef.Database.Core.Sql.SqlDataColumn"/> to the row.
            </summary>
            <param name="column">The <see cref="T:Beef.Database.Core.Sql.SqlDataColumn"/>.</param>
        </member>
        <member name="T:Beef.Database.Core.Sql.SqlDataTable">
            <summary>
            Represents a SQL data table.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataTable.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beef.Database.Core.Sql.SqlDataTable"/> class.
            </summary>
            <param name="schema">The schema name.</param>
            <param name="name">The table name.</param>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataTable.Schema">
            <summary>
            Gets or sets the schema name.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataTable.Name">
            <summary>
            Gets or sets the table name.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataTable.DbTable">
            <summary>
            Gets or sets the database <see cref="T:Beef.CodeGen.Entities.Table"/>.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataTable.IsRefData">
            <summary>
            Indicates whether the table is reference data.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataTable.IsMerge">
            <summary>
            Indicates whether the table data is to be merged.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataTable.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataTable.Rows">
            <summary>
            Gets the rows.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataTable.AddRow(Beef.Database.Core.Sql.SqlDataRow)">
            <summary>
            Adds a row (key value pairs of column name and corresponding value).
            </summary>
            <param name="row">The row.</param>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataTable.AddColumn(System.String)">
            <summary>
            Add to specified columns.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataTable.Prepare">
            <summary>
            Prepares the data.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataTable.AddColumnWhereNotSpecified(Beef.Database.Core.Sql.SqlDataRow,System.Boolean,System.String,System.Object)">
            <summary>
            Adds the column where not already specified.
            </summary>
        </member>
        <member name="T:Beef.Database.Core.Sql.SqlDataUpdater">
            <summary>
            Provides the capabibilities to update SQL data.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdater.RegisterDatabase(Beef.Data.Database.DatabaseBase,System.String)">
            <summary>
            Register the database.
            </summary>
            <param name="db">The <see cref="T:Beef.Data.Database.DatabaseBase"/>.</param>
            <param name="refDataSchema">The reference data schema.</param>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdater.RegisterDatabase(System.Collections.Generic.List{Beef.CodeGen.Entities.Table},System.String)">
            <summary>
            Registers the database tables.
            </summary>
            <param name="tables">The tables.</param>
            <param name="refDataSchema">The reference data schema.</param>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataUpdater.RefDataSchema">
            <summary>
            Gets the reference data schema.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataUpdater.DbTables">
            <summary>
            Gets the registered database tables.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdater.ReadYaml(System.String)">
            <summary>
            Reads and parses the YAML <see cref="T:System.String"/>.
            </summary>
            <param name="yaml">The YAML <see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:Beef.Database.Core.Sql.SqlDataUpdater"/>.</returns>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdater.ReadYaml(System.IO.Stream)">
            <summary>
            Reads and parses the YAML <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s">The YAML <see cref="T:System.IO.Stream"/>.</param>
            <returns>The <see cref="T:Beef.Database.Core.Sql.SqlDataUpdater"/>.</returns>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdater.ReadYaml(System.IO.TextReader)">
            <summary>
            Reads and parses the YAML <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="tr">The YAML <see cref="T:System.IO.TextReader"/>.</param>
            <returns>The <see cref="T:Beef.Database.Core.Sql.SqlDataUpdater"/>.</returns>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdater.ReadJson(System.String)">
            <summary>
            Reads and parses the JSON <see cref="T:System.String"/>.
            </summary>
            <param name="json">The JSON <see cref="T:System.String"/>.</param>
            <returns>The <see cref="T:Beef.Database.Core.Sql.SqlDataUpdater"/>.</returns>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdater.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Beef.Database.Core.Sql.SqlDataUpdater"/> class.
            </summary>
            <param name="json">The <see cref="T:Newtonsoft.Json.Linq.JObject"/> configuration.</param>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlDataUpdater.Tables">
            <summary>
            Gets <see cref="T:Beef.Database.Core.Sql.SqlDataTable"/> list.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdater.Parse">
            <summary>
            Parses the data operations generating the underlying SQL.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdater.GetChildObjects(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Gets the child objects.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdater.GetColumnValue(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Gets the column value.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdater.CreateXml">
            <summary>
            Writes the configuration as XML in preparation for code generation.
            </summary>
            <returns>The <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdater.GenerateSql(System.Action{Beef.CodeGen.CodeGeneratorEventArgs})">
            <summary>
            Generates the SQL.
            </summary>
            <param name="codeGen">The code generation action to execute.</param>
        </member>
        <member name="T:Beef.Database.Core.Sql.SqlDataUpdaterException">
            <summary>
            Represents a <see cref="T:Beef.Database.Core.Sql.SqlDataUpdater"/> exception.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlDataUpdaterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Beef.Database.Core.Sql.SqlDataUpdaterException"/> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Beef.Database.Core.Sql.SqlObjectReader">
            <summary>
            Represents a basic SQL object reader and parser.
            </summary>
        </member>
        <member name="F:Beef.Database.Core.Sql.SqlObjectReader.SupportedObjectTypes">
            <summary>
            Gets the list of supported object types and their application order.
            </summary>
        </member>
        <member name="T:Beef.Database.Core.Sql.SqlObjectReader.Token">
            <summary>
            Represents the token characteristics.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlObjectReader.Token.Line">
            <summary>
            Gets or sets the line.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlObjectReader.Token.Column">
            <summary>
            Gets or sets the column.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlObjectReader.Token.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlObjectReader.Read(System.String)">
            <summary>
            Reads and parses the SQL <see cref="T:System.String"/>.
            </summary>
            <param name="sql">The SQL <see cref="T:System.String"/>.</param>
            <returns>A <see cref="T:Beef.Database.Core.Sql.SqlObjectReader"/>.</returns>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlObjectReader.Read(System.IO.Stream)">
            <summary>
            Reads and parses the SQL <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="s">The SQL <see cref="T:System.IO.Stream"/>.</param>
            <returns>A <see cref="T:Beef.Database.Core.Sql.SqlObjectReader"/>.</returns>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlObjectReader.Read(System.IO.TextReader)">
            <summary>
            Reads and parses the SQL <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="tr">The SQL <see cref="T:System.IO.TextReader"/>.</param>
            <returns>A <see cref="T:Beef.Database.Core.Sql.SqlObjectReader"/>.</returns>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlObjectReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Beef.Database.Core.Sql.SqlObjectReader"/> class.
            </summary>
            <param name="tr"></param>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlObjectReader.Parse">
            <summary>
            Read file and parse out the primary tokens.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlObjectReader.IsValid">
            <summary>
            Indicates whether the SQL Object is valid.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlObjectReader.ErrorMessage">
            <summary>
            Gets the error message where not valid (see <see cref="P:Beef.Database.Core.Sql.SqlObjectReader.IsValid"/>).
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlObjectReader.CreateErrorMessage">
            <summary>
            Create the error message where not valid.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlObjectReader.GetDbOperationOrder">
            <summary>
            Gets the corresponding database operation order.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlObjectReader.SqlStatement">
            <summary>
            Gets the primary SQL command (first token).
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlObjectReader.SqlObjectType">
            <summary>
            Gets the underlying SQL object type (second token).
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlObjectReader.SqlObjectName">
            <summary>
            Gets the underlying SQL object name (third token).
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlObjectReader.Type">
            <summary>
            Gets the SQL object type.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlObjectReader.Schema">
            <summary>
            Gets the SQL object schema.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlObjectReader.Name">
            <summary>
            Gets the SQL object name.
            </summary>
        </member>
        <member name="P:Beef.Database.Core.Sql.SqlObjectReader.Order">
            <summary>
            Gets the SQL object type order of precedence.
            </summary>
        </member>
        <member name="M:Beef.Database.Core.Sql.SqlObjectReader.GetSql">
            <summary>
            Gets the SQL <see cref="T:System.String"/>.
            </summary>
            <returns>The SQL.</returns>
        </member>
    </members>
</doc>
