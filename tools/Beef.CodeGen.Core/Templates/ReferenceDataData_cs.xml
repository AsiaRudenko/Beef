<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef -->
<Template OutputGenDirName="Generated" OutputFileName="ReferenceDataData.cs">
  <Header>
    <![CDATA[/*
 * This file is automatically generated; any changes will be lost. 
 */
 
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef.Business;
using Beef.Mapper.Converters;
]]>
    <If Condition="Config.RefDataNamespace != null">
      <![CDATA[using RefDataNamespace = {{Config.RefDataNamespace}};
]]>
    </If>
    <If Condition="Config.RefDataBusNamespace != null">
      <![CDATA[using RefDataBusNamespace = {{Config.RefDataBusNamespace}};
]]>
    </If>
    <If Condition="Entity.AutoImplement == 'Database'">
      <![CDATA[using Beef.Data.Database;
]]>
      <If Condition="Config.DatabaseUsingNamespace != null">
        <![CDATA[using {{Config.DatabaseUsingNamespace}};
]]>
      </If>
    </If>
    <If Condition="Entity.AutoImplement == 'OData'">
      <![CDATA[using Beef.Data.OData;
]]>
      <If Condition="Config.ODataUsingNamespace != null">
        <![CDATA[using {{Config.ODataUsingNamespace}};
]]>
      </If>
    </If>
    <If Condition="Config.DataUsingNamespace != null">
      <![CDATA[using {{Config.DataUsingNamespace}};
]]>
    </If>
    <![CDATA[
namespace {{Config.Company}}.{{Config.AppName}}.Business.Data
{
    /// <summary>
    /// Provides the <b>ReferenceData</b> database access.
    /// </summary>
    public partial class ReferenceDataData : IReferenceDataData
    {
]]>
  </Header>
  <Entity>
    <Set Name="Entity.EntityName" Condition="Config.RefDataNamespace == null" Value="^{{Entity.Name}}" Otherwise="^RefDataNamespace.{{Entity.Name}}" />
    <Set Name="Entity.EntityCollectionName" Condition="Config.RefDataNamespace == null" Value="^{{Entity.Name}}Collection" Otherwise="^RefDataNamespace.{{Entity.Name}}Collection" />
    <If Condition="Entity.RefDataType != null and Entity.ExcludeData == false and Entity.ExcludeAll == false">
      <If Condition="System.Index > 0">
        <![CDATA[
]]>
      </If>
      <![CDATA[        /// <summary>
        /// Gets all the {{Entity.EntityName:ToSeeComments}} objects.
        /// </summary>
        /// <returns>A {{Entity.EntityCollectionName:ToSeeComments}}.</returns>
        public async Task<{{Entity.EntityCollectionName}}> {{Entity.Name}}GetAllAsync()
        {
            var __coll = new {{Entity.EntityCollectionName}}();
            await DataInvoker.Default.InvokeAsync(this, async () => ]]>
      <Set Name="Config.NewLine" Value="false" />
      <If Condition="Entity.AutoImplement == 'Database'">
        <Then>
          <![CDATA[
            {
                ]]>
          <If Condition="Entity.DatabaseName == null">
            <Then><![CDATA[Database]]></Then>
            <Else><![CDATA[{{Entity.DatabaseName}}]]></Else>
          </If>
          <![CDATA[.Default.GetRefData<{{Entity.EntityCollectionName}}, {{Entity.EntityName}}>(__coll, "[]]>
          <If Condition="Entity.DatabaseSchema == null">
            <Then><![CDATA[dbo]]></Then>
            <Else><![CDATA[{{Entity.DatabaseSchema}}]]></Else>
          </If>
          <![CDATA[].[sp{{Entity.Name}}GetAll]", "{{Entity.Name}}Id"]]>
          <If Condition="Entity.PropertyCount > 0">
            <![CDATA[, additionalProperties: (dr, item, fields) =>
                {
]]>
            <Property Condition="Property.Inherited == false">
              <![CDATA[                    item.{{Property.Name}} = ]]>
              <If Condition="Property.DataConverter != null">
                <Then>
                  <![CDATA[{{Property.DataConverter}}]]>
                  <If Condition="Property.IsDataConverterGeneric == true">
                    <![CDATA[<{{Property.Type}}>]]>
                  </If>
                  <![CDATA[.Default.ConvertToSrce(]]>
                </Then>
                <Else>
                  <If Condition="Property.RefDataType != null">
                    <If Condition="Config.MapperDefaultRefDataConverter != null">
                      <Then><![CDATA[{{Config.MapperDefaultRefDataConverter}}<{{Property.Type}}>]]></Then>
                      <Else><![CDATA[ReferenceDataCodeConverter<{{Property.Type}}>]]></Else>
                    </If>
                    <![CDATA[.Default.ConvertToSrce(]]>
                  </If>
                </Else>
              </If>
              <![CDATA[dr.GetValue<]]>
              <If Condition="Property.RefDataType == null">
                <Then>
                  <![CDATA[{{Property.Type}}]]>
                  <If Condition="Property.Type != 'string' and Property.Nullable == true"><![CDATA[?]]></If>
                  <If Condition="Property.DataName == null">
                    <Then>
                      <![CDATA[>("{{Property.Name}}")]]>
                    </Then>
                    <Else>
                      <![CDATA[>("{{Property.DataName}}")]]>
                    </Else>
                  </If>
                </Then>
                <Else>
                  <!-- Uses the Entity RefDataType as the template for the properties entity identifier type; a bit of a Hack. -->
                  <![CDATA[{{Entity.RefDataType}}]]>
                  <If Condition="Property.Type != 'string' and Property.Nullable == true"><![CDATA[?]]></If>
                  <If Condition="Property.DataName == null">
                    <Then>
                      <![CDATA[>("{{Property.Name}}Id")]]>
                    </Then>
                    <Else>
                      <![CDATA[>("{{Property.DataName}}")]]>
                    </Else>
                  </If>
                </Else>
              </If>
              <If Condition="Property.DataConverter != null or Property.RefDataType != null">
                <![CDATA[)]]>
              </If>
              <![CDATA[;
]]>
            </Property>
            <![CDATA[                }]]>
          </If>
          <![CDATA[);
                await Task.Delay(0);
            }]]>
          <Set Name="Config.NewLine" Value="true" />
        </Then>
        <Else>
          <![CDATA[await this.{{Entity.Name}}GetAll_OnImplementation(__coll)]]>
        </Else>
      </If>
      <![CDATA[, BusinessInvokerArgs.RequiresNewAndTransactionSuppress);
]]>
      <If Condition="Config.NewLine == true">
        <![CDATA[
]]>
      </If>
      <![CDATA[            return __coll;
        }
]]>
    </If>
  </Entity>
  <Footer>
    <![CDATA[    }
}
]]>
  </Footer>
</Template>