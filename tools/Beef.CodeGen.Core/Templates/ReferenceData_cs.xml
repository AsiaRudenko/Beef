<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef -->
<Template OutputGenDirName="Generated" OutputFileName="ReferenceData.cs" OutputDirName="{{Config.AppendToNamespace}}">
  <![CDATA[/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;
using Beef.Entities;
using Beef.RefData;
]]>
  <If Condition="Config.RefDataNamespace != null">
    <![CDATA[using RefDataNamespace = {{Config.RefDataNamespace}};
]]>
  </If>
  <If Condition="Config.RefDataBusNamespace != null">
    <![CDATA[using RefDataBusNamespace = {{Config.RefDataBusNamespace}};
]]>
  </If>
  <![CDATA[
namespace {{Config.Company}}.{{Config.AppName}}.Common.Entities]]>
  <If Condition="Config.AppendToNamespace != null">
    <Then><![CDATA[.{{Config.AppendToNamespace}}]]></Then>
  </If>
  <![CDATA[
{
    /// <summary>
    /// Provides a standard mechanism for accessing the <b>ReferenceData</b> via the <see cref="ReferenceData.Current"/> property. 
    /// </summary>
    /// <remarks>See <see cref="ReferenceData"/> for more information.</remarks>
    public abstract partial class ReferenceData : ReferenceDataManager
    {
        #region PropertyNames
    
]]>
  <Entity Condition="Entity.RefDataType != null and Entity.Abstract == false">
    <Set Name="Entity.EntityName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}" Otherwise="$RefDataNamespace.{{Entity.Name}}" />
    <Set Name="Entity.EntityCollectionName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}Collection" Otherwise="$RefDataNamespace.{{Entity.Name}}Collection" />
    <![CDATA[        /// <summary>
        /// Represents the {{Entity.Name:ToSeeComments}} property name.
        /// </summary>
        public const string Property_{{Entity.Name}} = "{{Entity.Name}}";

]]>
  </Entity>
  <![CDATA[        /// <summary>
        /// Gets all the underlying <see cref="ReferenceDataBase"/> <see cref="Type">types</see>.
        /// </summary>
        /// <returns>An array of the <see cref="ReferenceDataBase"/> <see cref="Type">types</see>.</returns>
        public override Type[] GetAllTypes() => new Type[] 
            {
]]>
  <Entity Condition="Entity.RefDataType != null and Entity.Abstract == false">
    <If Condition="System.Index > 0">
      <![CDATA[,
]]>
    </If>
    <![CDATA[                typeof({{Entity.Name}})]]>
  </Entity>
  <![CDATA[
            };
        
]]>
  <![CDATA[        #endregion
        
        /// <summary>
        /// Gets the current <see cref="ReferenceData"/> instance. 
        /// </summary>
        public static new ReferenceData Current
        {
            get { return (ReferenceData)ReferenceDataManager.Current; }
        }
    
        #region Collections

]]>
  <Entity Condition="Entity.RefDataType != null and Entity.Abstract == false">
    <![CDATA[        /// <summary> 
        /// Gets the {{Entity.EntityCollectionName:ToSeeComments}}.
        /// </summary>
        public abstract {{Entity.EntityCollectionName}} {{Entity.Name}} { get; }

]]>
  </Entity>
  <![CDATA[        #endregion
    }
}
]]>
</Template>